{"version":3,"file":"static/js/721.ce0eb923.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.module.css","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"title\":\"ContactForm_title__jZguf\",\"button\":\"ContactForm_button__eSwX9\",\"inputField\":\"ContactForm_inputField__qJkou\"};","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport contactFormStyles from './ContactForm.module.css';\n\nconst INITIAL_FORM_DATA = {\n  contactName: '',\n  contactNumber: '',\n};\n\nconst ContactForm = () => {\n  const { contactsItem } = useSelector(state => state.contacts);\n  console.log(contactsItem);\n\n  const [formData, setFormData] = useState(INITIAL_FORM_DATA);\n  const dispatch = useDispatch();\n\n  const onChange = evt => {\n    const { name, value } = evt.target;\n\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: formData.contactName,\n      number: formData.contactNumber,\n    };\n\n    if (\n      contactsItem.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contact list.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData(INITIAL_FORM_DATA);\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm} className={contactFormStyles.form}>\n        <label htmlFor=\"inputName\">\n          <p className={contactFormStyles.title}>Name</p>\n        </label>\n        <input\n          className={contactFormStyles.inputField}\n          id=\"inputName\"\n          type=\"text\"\n          name=\"contactName\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={onChange}\n          value={formData.contactName}\n          required\n        />\n        <label htmlFor=\"inputNumber\">\n          <p className={contactFormStyles.title}>Number</p>\n        </label>\n        <input\n          className={contactFormStyles.inputField}\n          id=\"inputNumber\"\n          type=\"tel\"\n          name=\"contactNumber\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={onChange}\n          value={formData.contactNumber}\n          required\n        />\n        <button type=\"submit\" className={contactFormStyles.button}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.func.isRequired,\n// };\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactListItem_btn__Kdzd+\"};","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport contactListItemStyles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      {name}: {number}\n      <button\n        onClick={() => dispatch(deleteContact(id))}\n        className={contactListItemStyles.btn}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\n// ContactListItem.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n// };\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import React, { useEffect } from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport contactListStyles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nconst ContactList = () => {\n  const { contactsItem, isLoading, error } = useSelector(\n    state => state.contacts\n  );\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contactsItem.filter(contact => {\n    if (typeof contact.name === 'string') {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    }\n    return false;\n  });\n\n  return (\n    <>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      <ul className={contactListStyles.list}>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListItem key={id} name={name} number={number} id={id} />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Filter_box__d3XyP\",\"inputField\":\"Filter_inputField__GiGjH\"};","// import React from 'react';\nimport { filterContact } from 'redux/filterSlice/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import PropTypes from 'prop-types';\nimport filterStyles from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n  const onChangeFilter = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <div className={filterStyles.box}>\n      <label htmlFor=\"inputSearch\">Find contacts by name</label>\n      <input\n        className={filterStyles.inputField}\n        id=\"inputSearch\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={onChangeFilter}\n        value={filter}\n        required\n      />\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   onChangeFilter: PropTypes.func.isRequired,\n// };\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nconst getContacts = state => state.contacts;\nconst Contacts = () => {\n  const { isLoading, error } = useSelector(getContacts);\n  return (\n    <>\n      <h2>Add new contact</h2>\n      <ContactForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n\n      <h2>My contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["INITIAL_FORM_DATA","contactName","contactNumber","contactsItem","useSelector","state","contacts","console","log","useState","formData","setFormData","dispatch","useDispatch","onChange","evt","target","name","value","prevState","reset","onSubmit","preventDefault","newContact","id","nanoid","number","find","contact","toLowerCase","alert","addContact","className","contactFormStyles","htmlFor","type","pattern","title","required","onClick","deleteContact","contactListItemStyles","isLoading","error","filter","useEffect","fetchContacts","filteredContacts","includes","contactListStyles","map","filterStyles","e","filterContact","getContacts"],"sourceRoot":""}