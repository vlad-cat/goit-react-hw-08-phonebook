{"version":3,"file":"static/js/40.d1f7d756.chunk.js","mappings":"oOACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA4F,0B,oBCMtFA,EAAkB,SAAAC,GACtBC,IAAAA,OAAAA,QAAwB,UAAWD,EACpC,EAEYE,EAAe,WAAO,IAAD,IAC1BC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAwB1B,OACE,4BACE,kBAAMC,UAAWC,EAAyBC,SAxBzB,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACf,EAAkCD,EAAKE,SAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAEjBA,EAASC,MAAMC,OAAS,EAC1BrB,EAAgB,4DAMlBI,GACEkB,EAAAA,EAAAA,IAAS,CACPL,KAAMA,EAAKG,MACXF,MAAOA,EAAME,MACbD,SAAUA,EAASC,SAGvBN,EAAKS,QACN,EAIG,WACE,qCAEE,kBACEd,UAAWC,EACXc,KAAK,OACLP,KAAK,OACLQ,IAAI,UAGR,uCAEE,kBACEhB,UAAWC,EACXc,KAAK,OACLP,KAAK,cAGT,yCAEE,kBACER,UAAWC,EACXc,KAAK,WACLP,KAAK,iBAGT,mBAAQR,UAAWC,EAAwBc,KAAK,SAAhD,yBAII,OAALlB,QAAK,IAALA,GAAA,UAAAA,EAAOoB,gBAAP,mBAAiBC,YAAjB,eAAuBV,OACtBjB,EAAgB,sCAGvB,EC9DD,EATiB,WACf,OACE,iCACE,sCACA,SAACG,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"input\":\"RegisterForm_input__FsgBz\",\"btn\":\"RegisterForm_btn__bgTuW\"};","import { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\n\nimport { register } from 'redux/auth/operations';\nimport registerFormStyles from './RegisterForm.module.css';\nimport { getError } from 'redux/auth/selectors';\n\nconst getNotification = message => {\n  Notiflix.Report.warning('Warning', message);\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(getError);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const { name, email, password } = form.elements;\n\n    if (password.value.length < 7) {\n      getNotification(\n        `The password must be composed of at least 7 characters.`\n      );\n      return;\n    }\n\n    dispatch(\n      register({\n        name: name.value,\n        email: email.value,\n        password: password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form className={registerFormStyles.form} onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            className={registerFormStyles.input}\n            type=\"text\"\n            name=\"name\"\n            min=\"6\"\n          />\n        </label>\n        <label>\n          E-mail\n          <input\n            className={registerFormStyles.input}\n            type=\"text\"\n            name=\"email\"\n          />\n        </label>\n        <label>\n          Password\n          <input\n            className={registerFormStyles.input}\n            type=\"password\"\n            name=\"password\"\n          />\n        </label>\n        <button className={registerFormStyles.btn} type=\"submit\">\n          Sign up\n        </button>\n      </form>\n      {error?.response?.data?.name &&\n        getNotification('This email is already registered')}\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <>\n      <h2>Register</h2>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["getNotification","message","Notiflix","RegisterForm","dispatch","useDispatch","error","useSelector","getError","className","registerFormStyles","onSubmit","e","preventDefault","form","currentTarget","elements","name","email","password","value","length","register","reset","type","min","response","data"],"sourceRoot":""}